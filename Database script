-- MySQL VERSION (snake_case):
-- DROP TABLE IF EXISTS order_items;
-- DROP TABLE IF EXISTS orders;
-- DROP TABLE IF EXISTS addresses;
-- DROP TABLE IF EXISTS cart_items;
-- DROP TABLE IF EXISTS credit_cards;
-- DROP TABLE IF EXISTS users;
-- DROP TABLE IF EXISTS products;

CREATE TABLE users
(
    user_id INT NOT NULL AUTO_INCREMENT, 
    email VARCHAR(50) NOT NULL UNIQUE,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL, 
    user_password VARCHAR(50) NOT NULL,
    phone CHAR(10) NOT NULL,
    PRIMARY KEY (user_id)
);

CREATE TABLE addresses
(
    address_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    recipient_name VARCHAR(50),
    street VARCHAR(50) NOT NULL,
    street2 VARCHAR(50),
    city VARCHAR(30) NOT NULL,
    state CHAR(2) NOT NULL,
    zip CHAR(5) NOT NULL,
    is_shipping INT NOT NULL,
    is_billing INT NOT NULL,
    PRIMARY KEY (address_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE products
(
    upc VARCHAR(12) NOT NULL,
    prod_name VARCHAR(64) NOT NULL,
    brand VARCHAR(50) NOT NULL,
    category VARCHAR(50) NOT NULL,
    prod_description TEXT NOT NULL,
    price_per_unit FLOAT NOT NULL,
    image_url VARCHAR(2048),
    available_stock INT NOT NULL,
    reserved_stock INT NOT NULL,
    shipped_stock INT NOT NULL,
    PRIMARY KEY (upc)
);

CREATE TABLE cart_items
(
    cart_item_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    upc CHAR(12) NOT NULL,
    quantity INT,
    PRIMARY KEY (cart_item_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (upc) REFERENCES products (upc) ON DELETE CASCADE
);

CREATE TABLE credit_cards
(
    credit_card_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    cardholder_name VARCHAR(40) NOT NULL,
    last_four_card_number CHAR(16) NOT NULL,
    expiration_year CHAR(4) NOT NULL,
    expiration_month CHAR(2) NOT NULL,
    PRIMARY KEY (credit_card_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE orders
(
    order_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    address_id INT NOT NULL,
    price FLOAT NOT NULL,
    credit_card_id INT NOT NULL,
    date_ordered DATETIME NOT NULL,
    date_shipped DATETIME,
    order_status VARCHAR(20) NOT NULL,
    PRIMARY KEY (order_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (address_id) REFERENCES addresses (address_id) ON DELETE CASCADE,
    FOREIGN KEY (credit_card_id) REFERENCES credit_cards (credit_card_id) ON DELETE CASCADE
);

CREATE TABLE order_items
(
    order_item_id INT NOT NULL AUTO_INCREMENT,
    order_id INT NOT NULL,
    quantity INT NOT NULL,
    upc CHAR(12) NOT NULL,
    PRIMARY KEY (order_item_id),
    FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE,
    FOREIGN KEY (upc) REFERENCES products (upc) ON DELETE CASCADE
);

-- LIVESQL VERSION (snake_case)
-- DROP TABLE IF EXISTS order_items;
-- DROP TABLE IF EXISTS orders;
-- DROP TABLE IF EXISTS addresses;
-- DROP TABLE IF EXISTS cart_items;
-- DROP TABLE IF EXISTS credit_cards;
-- DROP TABLE IF EXISTS users;
-- DROP TABLE IF EXISTS products;

CREATE TABLE users
(
    user_id INT NOT NULL IDENTITY(1, 1), 
    email VARCHAR(50) NOT NULL UNIQUE,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL, 
    user_password VARCHAR(50) NOT NULL,
    phone CHAR(10) NOT NULL,
    PRIMARY KEY (user_id)
);

CREATE TABLE addresses
(
    address_id INT NOT NULL IDENTITY(1, 1),
    user_id INT NOT NULL,
    recipient_name VARCHAR(50),
    street VARCHAR(50) NOT NULL,
    street2 VARCHAR(50),
    city VARCHAR(30) NOT NULL,
    state CHAR(2) NOT NULL,
    zip CHAR(5) NOT NULL,
    is_shipping INT NOT NULL,
    is_billing INT NOT NULL,
    PRIMARY KEY (address_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE products
(
    upc VARCHAR(12) NOT NULL,
    prod_name VARCHAR(64) NOT NULL,
    brand VARCHAR(50) NOT NULL,
    category VARCHAR(50) NOT NULL,
    prod_description TEXT NOT NULL,
    price_per_unit FLOAT NOT NULL,
    image_url VARCHAR(2048),
    available_stock INT NOT NULL,
    reserved_stock INT NOT NULL,
    shipped_stock INT NOT NULL,
    PRIMARY KEY (upc)
);

CREATE TABLE cart_items
(
    cart_item_id INT NOT NULL IDENTITY(1, 1),
    user_id INT NOT NULL,
    upc CHAR(12) NOT NULL,
    quantity INT,
    PRIMARY KEY (cart_item_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (upc) REFERENCES products (upc) ON DELETE CASCADE
);

CREATE TABLE credit_cards
(
    credit_card_id INT NOT NULL IDENTITY(1, 1),
    user_id INT NOT NULL,
    cardholder_name VARCHAR(40) NOT NULL,
    last_four_card_number CHAR(16) NOT NULL,
    expiration_year CHAR(4) NOT NULL,
    expiration_month CHAR(2) NOT NULL,
    PRIMARY KEY (credit_card_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE orders
(
    order_id INT NOT NULL IDENTITY(1, 1),
    user_id INT NOT NULL,
    address_id INT NOT NULL,
    price FLOAT NOT NULL,
    credit_card_id INT NOT NULL,
    date_ordered DATETIME NOT NULL,
    date_shipped DATETIME,
    order_status VARCHAR(20) NOT NULL,
    PRIMARY KEY (order_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (address_id) REFERENCES addresses (address_id) ON DELETE CASCADE,
    FOREIGN KEY (credit_card_id) REFERENCES credit_cards (credit_card_id) ON DELETE CASCADE
);

CREATE TABLE order_items
(
    order_item_id INT NOT NULL IDENTITY(1, 1),
    order_id INT NOT NULL,
    quantity INT NOT NULL,
    upc CHAR(12) NOT NULL,
    PRIMARY KEY (order_item_id),
    FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE,
    FOREIGN KEY (upc) REFERENCES products (upc) ON DELETE CASCADE
);


